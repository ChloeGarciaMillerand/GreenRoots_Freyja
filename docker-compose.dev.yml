services:
  database:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./@back/database/migration/create-tables.sql:/docker-entrypoint-initdb.d/01-create-tables.sql
      - ./@back/database/seeders/sample-data.sql:/docker-entrypoint-initdb.d/02-sample-data.sql

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./@back
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./@back:/app
      - /app/node_modules
    develop:
      watch:
        - action: sync
          path: ./@back
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./@back/package.json

  frontend:
    build:
      context: ./@front
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./@front:/app
      - /app/node_modules
    develop:
      watch:
        - action: sync
          path: ./@front
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./@front/package.json

volumes:
  db_data:
