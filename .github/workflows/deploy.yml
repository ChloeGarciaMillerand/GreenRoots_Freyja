name: Deploy GreenRoots

on:
  push:
    branches: [ main, feat-deploy ]  # Ajoutez votre branche ici
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.TEST_POSTGRES_DB || 'greenroots_test' }}
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER || 'test_user' }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD || 'test_password' }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://${{ secrets.TEST_POSTGRES_USER || 'test_user' }}:${{ secrets.TEST_POSTGRES_PASSWORD || 'test_password' }}@localhost:5432/${{ secrets.TEST_POSTGRES_DB || 'greenroots_test' }}
      DB_USER: ${{ secrets.TEST_POSTGRES_USER || 'test_user' }}
      DB_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD || 'test_password' }}
      DB_HOST: localhost
      DB_NAME: ${{ secrets.TEST_POSTGRES_DB || 'greenroots_test' }}
      DB_PORT: 5432
      POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER || 'test_user' }}
      POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD || 'test_password' }}
      POSTGRES_DB: ${{ secrets.TEST_POSTGRES_DB || 'greenroots_test' }}
      NODE_ENV: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'pnpm'

    - name: Install backend dependencies
      run: |
        cd @back
        pnpm install --frozen-lockfile

    - name: Setup test database
      run: |
        cd @back
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U ${{ secrets.TEST_POSTGRES_USER || 'test_user' }}; do sleep 1; done
        # Create tables
        PGPASSWORD=${{ secrets.TEST_POSTGRES_PASSWORD || 'test_password' }} psql -h localhost -U ${{ secrets.TEST_POSTGRES_USER || 'test_user' }} -d ${{ secrets.TEST_POSTGRES_DB || 'greenroots_test' }} -f database/migration/create-tables.sql

    - name: Run backend tests
      run: |
        cd @back
        pnpm test

    - name: Install frontend dependencies
      run: |
        cd @front
        pnpm install --frozen-lockfile

    - name: Build frontend
      run: |
        cd @front
        pnpm build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./@back
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./@front
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    environment: production

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd /home/ubuntu/greenroots
          
          # Pull latest code
          git pull origin ${{ github.ref_name }}
          
          # Create/update .env file with production values
          cp .env.example .env
          
          # Stop only backend and frontend (keep database running)
          docker-compose -f docker-compose.prod.yml stop backend frontend
          
          # Rebuild backend and frontend
          docker-compose -f docker-compose.prod.yml build --no-cache backend frontend
          
          # Start all services (database will stay running if already up)
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up unused images
          docker image prune -f
